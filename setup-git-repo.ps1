# Git Repository Setup Script
# This script helps safely initialize Git repositories and prevent desktop uploads

param(
    [Parameter(Mandatory=$true)]
    [string]$ProjectName,
    
    [Parameter(Mandatory=$true)]
    [string]$GitHubRepoUrl
)

Write-Host "Setting up Git repository for: $ProjectName" -ForegroundColor Green

# Check if we're in the correct directory (should be inside the project folder)
$currentDir = Get-Location
$parentDir = Split-Path $currentDir -Parent

Write-Host "Current directory: $currentDir" -ForegroundColor Yellow
Write-Host "Parent directory: $parentDir" -ForegroundColor Yellow

# Check if we're in a project folder (not desktop root)
if ($currentDir -like "*Desktop*" -and $currentDir -notlike "*Desktop\*") {
    Write-Host "WARNING: You appear to be in the Desktop root directory!" -ForegroundColor Red
    Write-Host "Please navigate to your project folder first." -ForegroundColor Red
    exit 1
}

# Initialize Git repository
Write-Host "Initializing Git repository..." -ForegroundColor Cyan
git init

# Set up remote
Write-Host "Setting up remote: $GitHubRepoUrl" -ForegroundColor Cyan
git remote add origin $GitHubRepoUrl

# Create comprehensive .gitignore if it doesn't exist
if (-not (Test-Path ".gitignore")) {
    Write-Host "Creating comprehensive .gitignore..." -ForegroundColor Cyan
    
    @"
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# Next.js
/.next/
/out/

# Production
/build

# Misc
.DS_Store
*.pem

# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Local env files
.env*.local
.env

# Vercel
.vercel

# TypeScript
*.tsbuildinfo
next-env.d.ts

# IDE and Editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# Windows shortcuts and links
*.lnk
*.url

# Desktop files (prevent entire desktop upload)
Desktop/
Desktop.ini
*.lnk
*.url
*.desktop

# Temporary files
*.tmp
*.temp
*.log

# Build artifacts
dist/
build/
out/

# Package manager files
yarn.lock
pnpm-lock.yaml
package-lock.json

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Cache directories
.cache/
.parcel-cache/

# Coverage reports
coverage/
*.lcov

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
public

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# User-specific files
*.user
*.suo
*.userosscache
*.sln.docstates

# Backup files
*.bak
*.backup
*.old

# Archive files (except project archives)
*.zip
*.tar.gz
*.rar
*.7z

# Database files
*.db
*.sqlite
*.sqlite3

# Log files
logs/
*.log

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
"@ | Out-File -FilePath ".gitignore" -Encoding UTF8
}

# Add all files
Write-Host "Adding files to repository..." -ForegroundColor Cyan
git add .

# Check what files are staged
Write-Host "Files staged for commit:" -ForegroundColor Yellow
git status --porcelain

# Ask for confirmation before committing
Write-Host "`nReview the files above. Do you want to commit these files? (y/n)" -ForegroundColor Green
$response = Read-Host

if ($response -eq "y" -or $response -eq "Y") {
    # Commit
    Write-Host "Committing files..." -ForegroundColor Cyan
    git commit -m "Initial commit: $ProjectName"
    
    # Push to GitHub
    Write-Host "Pushing to GitHub..." -ForegroundColor Cyan
    git push -u origin main
    
    Write-Host "Repository setup complete!" -ForegroundColor Green
    Write-Host "Your project is now available at: $GitHubRepoUrl" -ForegroundColor Green
} else {
    Write-Host "Commit cancelled. You can manually add and commit files later." -ForegroundColor Yellow
}

Write-Host "`nSafety tips:" -ForegroundColor Cyan
Write-Host "1. Always run this script from INSIDE your project folder" -ForegroundColor White
Write-Host "2. Never run 'git init' from Desktop root" -ForegroundColor White
Write-Host "3. Check 'git status' before committing" -ForegroundColor White
Write-Host "4. Use 'git add .' carefully - it adds ALL files in current directory" -ForegroundColor White 